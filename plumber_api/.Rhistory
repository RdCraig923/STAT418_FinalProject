all_bpi_data[[as.character(year)]] <- bpi_combined
library(rvest)
library(dplyr)
library(MASS)
library(tibble)
# Step 1: Scrape data
seasons <- 2022:2024
all_bpi_data <- list()
for (year in seasons) {
url <- paste0("https://www.espn.com/nba/bpi/_/view/playoffs/season/", year)
page <- tryCatch(read_html(url), error = function(e) NULL)
if (is.null(page)) next
tables <- html_table(page, fill = TRUE)
if (length(tables) >= 2) {
teams <- tables[[1]]
metrics <- tables[[2]]
bpi_combined <- bind_cols(teams, metrics)
colnames(bpi_combined) <- c("Team", "PBPI", "POFF", "PDEF", "PLAYOFF%", "MAKE_CS%", "MAKE_CF%", "FINALS%", "WIN_TITLE%")
bpi_combined$Season <- year
all_bpi_data[[as.character(year)]] <- bpi_combined
}
}
# Step 2: Clean data
bpi_all_years <- bind_rows(all_bpi_data)
bpi_filtered <- bpi_all_years %>%
filter(Team != "Team") %>%
mutate(rounds_won = case_when(
`WIN_TITLE%` == "100.0" ~ "5: Champ",
`FINALS%` == "100.0" ~ "4: Finals",
`MAKE_CF%` == "100.0" ~ "3: Conf Finals",
`MAKE_CS%` == "100.0" ~ "2: Round 2",
`PLAYOFF%` == "100.0" ~ "1: Round 1",
TRUE ~ "0: Missed"
))
bpi_filtered$rounds_won <- factor(bpi_filtered$rounds_won,
levels = c("0: Missed", "1: Round 1", "2: Round 2", "3: Conf Finals", "4: Finals", "5: Champ"),
ordered = TRUE)
bpi_filtered$POFF <- as.numeric(as.character(bpi_filtered$POFF))
bpi_filtered$PDEF <- as.numeric(as.character(bpi_filtered$PDEF))
dataset <- bpi_filtered[, c("Team", "POFF", "PDEF", "Season", "rounds_won")]
# Step 3: Build the model
simple_model <- polr(rounds_won ~ POFF + PDEF, data = dataset, Hess = TRUE)
# Step 4: Save the model for the API
saveRDS(simple_model, "simple_model.rds")
library(plumber)
library(MASS)
library(dplyr)
model <- readRDS("simple_model.rds")
#* Predict postseason round
#* @param poff Numeric offensive rating
#* @param pdef Numeric defensive rating
#* @post /predict
function(poff, pdef) {
new_data <- data.frame(POFF = as.numeric(poff), PDEF = as.numeric(pdef))
prediction <- predict(model, newdata = new_data)
list(prediction = as.character(prediction))
}
#* Return prediction probabilities
#* @param poff Numeric offensive rating
#* @param pdef Numeric defensive rating
#* @post /probabilities
function(poff, pdef) {
new_data <- data.frame(POFF = as.numeric(poff), PDEF = as.numeric(pdef))
probs <- predict(model, newdata = new_data, type = "prob")
as.list(probs[1, ])
}
source("model_build.R")  # Builds & saves the model
library(plumber)
pr <- plumb("plumber.R")
pr$run(host = "0.0.0.0", port = 8000)
source("model_build.R")  # Builds & saves the model
library(plumber)
pr <- plumb("plumber.R")
pr$run(host = "0.0.0.0", port = 8000)
source("model_build.R")  # Builds & saves the model
library(plumber)
pr <- plumb("plumber.R")
pr$run(host = "0.0.0.0", port = 8000)
library(rvest)
library(dplyr)
library(MASS)
library(tibble)
# Step 1: Scrape data
seasons <- 2022:2024
all_bpi_data <- list()
for (year in seasons) {
url <- paste0("https://www.espn.com/nba/bpi/_/view/playoffs/season/", year)
page <- tryCatch(read_html(url), error = function(e) NULL)
if (is.null(page)) next
tables <- html_table(page, fill = TRUE)
if (length(tables) >= 2) {
teams <- tables[[1]]
metrics <- tables[[2]]
bpi_combined <- bind_cols(teams, metrics)
colnames(bpi_combined) <- c("Team", "PBPI", "POFF", "PDEF", "PLAYOFF%", "MAKE_CS%", "MAKE_CF%", "FINALS%", "WIN_TITLE%")
bpi_combined$Season <- year
all_bpi_data[[as.character(year)]] <- bpi_combined
}
}
# Step 2: Clean data
bpi_all_years <- bind_rows(all_bpi_data)
bpi_filtered <- bpi_all_years %>%
filter(Team != "Team") %>%
mutate(rounds_won = case_when(
`WIN_TITLE%` == "100.0" ~ "5: Champ",
`FINALS%` == "100.0" ~ "4: Finals",
`MAKE_CF%` == "100.0" ~ "3: Conf Finals",
`MAKE_CS%` == "100.0" ~ "2: Round 2",
`PLAYOFF%` == "100.0" ~ "1: Round 1",
TRUE ~ "0: Missed"
))
bpi_filtered$rounds_won <- factor(bpi_filtered$rounds_won,
levels = c("0: Missed", "1: Round 1", "2: Round 2", "3: Conf Finals", "4: Finals", "5: Champ"),
ordered = TRUE)
bpi_filtered$POFF <- as.numeric(as.character(bpi_filtered$POFF))
bpi_filtered$PDEF <- as.numeric(as.character(bpi_filtered$PDEF))
dataset <- bpi_filtered[, c("Team", "POFF", "PDEF", "Season", "rounds_won")]
# Step 3: Build the model
simple_model <- polr(rounds_won ~ POFF + PDEF, data = dataset, Hess = TRUE)
# Step 4: Save the model for the API
saveRDS(simple_model, "simple_model.rds")
plumber::plumb(file='plumber.R')$run()
model <- readRDS("simple_model.rds")
new_data <- data.frame(POFF = 0, PDEF = 0)
probs <- predict(model, newdata = new_data, type = "prob")
print(probs)
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
model <- readRDS("simple_model.rds")
new_data <- data.frame(POFF = 0, PDEF = 0)
probs <- predict(model, newdata = new_data, type = "prob")
prob_vec <- as.numeric(probs[1, ])
prob_vec <- as.numeric(probs)
names(prob_vec) <- colnames(probs)
prob_strings <- paste0(names(prob_vec), ": ", round(prob_vec * 100, 2), "%")
result_string <- paste(prob_strings, collapse = ", ")
list(probabilities = result_string)
probs
probs <- predict(model, newdata = new_data, type = "prob")
# Convert named numeric vector to named list for JSON output
prob_list <- as.list(probs)
prob_list
list(probabilities = result_string)
list(probabilities = prob_list)
prob_list
plumb(file='plumber.R')$run()
source("model_build.R")  # Builds & saves the model
library(plumber)
pr <- plumb("plumber.R")
pr$run(host = "0.0.0.0", port = 8000)
source("model_build.R")  # Builds & saves the model
library(plumber)
pr <- plumb("plumber.R")
pr$run(host = "0.0.0.0", port = 8000)
source("model_build.R")  # Builds & saves the model
library(plumber)
pr <- plumb("plumber.R")
pr$run(host = "0.0.0.0", port = 8000)
poff_num <- 0
pdef_num <- 0
new_data <- data.frame(POFF = poff_num, PDEF = pdef_num)
probs <- predict(model, newdata = new_data, type = "prob")
poff_num <- 0
pdef_num <- 0
model <- simple_model
new_data <- data.frame(POFF = poff_num, PDEF = pdef_num)
probs <- predict(model, newdata = new_data, type = "prob")
prob_df <- as.data.frame(t(probs)) %>%
rownames_to_column(var = "Outcome") %>%
rename(Probability = 2)
ggplot(prob_df, aes(x = Outcome, y = Probability, fill = Outcome)) +
geom_bar(stat = "identity") +
labs(title = "Postseason Outcome Probabilities", x = "", y = "Probability") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
poff_num <- 0
pdef_num <- 0
model <- simple_model
new_data <- data.frame(POFF = poff_num, PDEF = pdef_num)
probs <- predict(model, newdata = new_data, type = "prob")
prob_data <- as.data.frame(probs) %>%
rownames_to_column(var = "case")
visual <- ggplot(data = prob_data, aes(x=case, y=predicted_probs, fill=case)) + geom_bar(stat = "identity") + labs(title = "Likely Postseason Outcomes by Round", x = "Outcome", y = "Probability %")
return(visual)
poff_num <- 0
pdef_num <- 0
model <- simple_model
new_data <- data.frame(POFF = poff_num, PDEF = pdef_num)
probs <- predict(model, newdata = new_data, type = "prob")
prob_data <- as.data.frame(probs) %>%
rownames_to_column(var = "case")
visual <- ggplot(data = prob_data, aes(x=case, y=predicted_probs, fill=case)) + geom_bar(stat = "identity") + labs(title = "Likely Postseason Outcomes by Round", x = "Outcome", y = "Probability %")
return(visual)
poff_num <- 0
pdef_num <- 0
model <- simple_model
new_data <- data.frame(POFF = poff_num, PDEF = pdef_num)
probs <- predict(model, newdata = new_data, type = "prob")
probs
prob_data <- as.data.frame(predicted_probs) %>%
rownames_to_column(var = "case")
prob_data <- as.data.frame(probs) %>%
rownames_to_column(var = "case")
prob_data
visual <- ggplot(data = prob_data, aes(x=case, y=predicted_probs, fill=case)) + geom_bar(stat = "identity") + labs(title = "Likely Postseason Outcomes by Round", x = "Outcome", y = "Probability %")
visual
visual <- ggplot(data = prob_data, aes(x=case, y=probs, fill=case)) + geom_bar(stat = "identity") + labs(title = "Likely Postseason Outcomes by Round", x = "Outcome", y = "Probability %")
visual
source("model_build.R")  # Builds & saves the model
library(plumber)
pr <- plumb("plumber.R")
pr$run(host = "0.0.0.0", port = 8000)
source("model_build.R")  # Builds & saves the model
library(plumber)
pr <- plumb("plumber.R")
pr$run(host = "0.0.0.0", port = 8000)
plumb(file='plumber.R')$run()
source("model_build.R")  # Builds & saves the model
library(plumber)
pr <- plumb("plumber.R")
pr$run(host = "0.0.0.0", port = 8000)
source("model_build.R")  # Builds & saves the model
library(plumber)
pr <- plumb("plumber.R")
pr$run(host = "0.0.0.0", port = 8000)
source("model_build.R")  # Builds & saves the model
library(plumber)
pr <- plumb("plumber.R")
pr$run(host = "0.0.0.0", port = 8000)
source("model_build.R")  # Builds & saves the model
library(plumber)
pr <- plumb("plumber.R")
pr$run(host = "0.0.0.0", port = 8000)
library(plumber)
port <- as.numeric(Sys.getenv("PORT", "8080"))
pr <- plumb("plumber.R")
pr$run(host = "0.0.0.0", port = port)
